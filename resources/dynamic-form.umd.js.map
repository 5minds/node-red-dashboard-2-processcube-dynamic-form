{"version":3,"file":"dynamic-form.umd.js","sources":["../ui/components/DynamicForm.vue"],"sourcesContent":["<template>\n    <!-- Component must be wrapped in a block so props such as className and style can be passed in from parent -->\n    <div className=\"dynamic-form-wrapper\">\n        <p v-if=\"hasFields\">\n            <v-form ref=\"form\" v-model=\"form\">\n                <v-row v-for=\"(field, index) in fields\" :key=\"index\">\n                    <v-col cols=\"12\">\n                        <component\n                            :is=\"field.component\"\n                            :id=\"field.id\"\n                            v-model=\"formData[field.id]\"\n                            :required=\"field.required\"\n                            :items=\"field.items\"\n                            :label=\"field.label\"\n                        />\n                    </v-col>\n                </v-row>\n\n                <v-row>\n                    <v-col cols=\"6\">\n                        <v-btn variant=\"outlined\" block @click=\"cancel\">{{ cancel_title }}</v-btn>\n                    </v-col>\n                    <v-col cols=\"6\">\n                        <v-btn block @click=\"submit\">{{ submit_title }}</v-btn>\n                    </v-col>\n                </v-row>\n            </v-form>\n        </p>\n        <p v-else>\n            <v-alert :text=\"waiting_info\" :title=\"waiting_title\" />\n        </p>\n    </div>\n</template>\n\n<script>\nimport { markRaw } from 'vue'\nimport { mapState } from 'vuex'\n\nexport default {\n    name: 'DynamicForm',\n    inject: ['$socket'],\n    props: {\n        /* do not remove entries from this - Dashboard's Layout Manager's will pass this data to your component */\n        id: { type: String, required: true },\n        props: { type: Object, default: () => ({}) },\n        state: { type: Object, default: () => ({ enabled: false, visible: false }) }\n    },\n    setup (props) {\n        console.info('DynamicForm setup with:', props)\n        console.debug('Vue function loaded correctly', markRaw)\n    },\n    data () {\n        return {\n            form: {},\n            formData: {}\n        }\n    },\n    computed: {\n        ...mapState('data', ['messages']),\n        fields () {\n            const aFields = this.messages && this.messages[this.id] ? this.messages[this.id].payload.formFields : []\n\n            const fieldMap = aFields.map(field => ({\n                ...field,\n                component: field.type\n            }))\n\n            return fieldMap\n        },\n        hasFields () {\n            return this.messages && this.messages[this.id] && this.messages[this.id].payload.formFields\n        },\n        waiting_title () {\n            return this.props.waiting_title || 'Warten auf den Usertask...'\n        },\n        waiting_info () {\n            return this.props.waiting_info || 'Der Usertask wird automatisch angezeigt, wenn ein entsprechender Task vorhanden ist.'\n        },\n        submit_title () {\n            return this.props.submit_title || 'Submit your task'\n        },\n        cancel_title () {\n            return this.props.cancel_title || 'Cancel your task'\n        }\n    },\n    mounted () {\n        this.$socket.on('widget-load:' + this.id, (msg) => {\n            // load the latest message from the Node-RED datastore when this widget is loaded\n            // storing it in our vuex store so that we have it saved as we navigate around\n            this.$store.commit('data/bind', {\n                widgetId: this.id,\n                msg\n            })\n        })\n        this.$socket.on('msg-input:' + this.id, (msg) => {\n            // store the latest message in our client-side vuex store when we receive a new message\n\n            console.info(msg)\n\n            if (msg.payload.formFields) {\n                const formData = msg.payload.formFields.reduce((acc, field) => {\n                    console.info('field:', field)\n                    console.info('field.id:', field.id)\n\n                    acc[field.id] = field.value || ''\n                    return acc\n                }, {})\n\n                console.info('formData: ', formData)\n                console.info('this.formData (1):', this.formData)\n\n                this.formData = formData\n                console.info('this.formData (2):', this.formData)\n            }\n\n            this.$store.commit('data/bind', {\n                widgetId: this.id,\n                msg\n            })\n        })\n        // tell Node-RED that we're loading a new instance of this widget\n        this.$socket.emit('widget-load', this.id)\n    },\n    unmounted () {\n        /* Make sure, any events you subscribe to on SocketIO are unsubscribed to here */\n        this.$socket?.off('widget-load' + this.id)\n        this.$socket?.off('msg-input:' + this.id)\n    },\n    methods: {\n        /*\n            widget-action just sends a msg to Node-RED, it does not store the msg state server-side\n            alternatively, you can use widget-change, which will also store the msg in the Node's datastore\n        */\n        send (msg) {\n            this.$socket.emit('widget-action', this.id, msg)\n        },\n        submit () {\n            this.send({ payload: this.formData })\n        },\n        cancel () {\n            this.send({ payload: this.formData })\n        }\n    }\n}\n</script>\n\n<style scoped>\n/* CSS is auto scoped, but using named classes is still recommended */\n@import \"../stylesheets/dynamic-form.css\";\n</style>\n"],"names":["_sfc_main","props","markRaw","mapState","field","msg","formData","acc","_a","_b","_hoisted_1","_openBlock","_createElementBlock","_Fragment","_createCommentVNode","_createElementVNode","$options","_hoisted_2","_createVNode","_component_v_form","$data","_cache","$event","_withCtx","_renderList","index","_createBlock","_component_v_row","_component_v_col","_resolveDynamicComponent","_component_v_btn","_createTextVNode","_toDisplayString","_hoisted_3","_component_v_alert"],"mappings":"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"}